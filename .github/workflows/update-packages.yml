name: Update NuGet Packages

on:
  workflow_dispatch:

jobs:
  update-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Fail if not on master
        if: github.ref != 'refs/heads/master'
        run: |
          echo "This workflow must run only on master branch!"
          exit 1

      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Setup .NET 8, 9 and 10 SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
            10.0.x

      - name: Install dotnet-outdated tool
        run: dotnet tool install --global dotnet-outdated-tool

      - name: Find solution file
        id: find-sln
        run: |
          slnfile=$(find . -maxdepth 1 -name '*.sln' | head -n 1)
          if [[ -z "$slnfile" ]]; then
            echo "No solution file found!"
            exit 1
          fi
          echo "sln=$slnfile" >> $GITHUB_OUTPUT

      - name: Update packages using dotnet-outdated
        run: |
          dotnet outdated "${{ steps.find-sln.outputs.sln }}" --upgrade --no-restore | tee outdated.log

      - name: Update conditional package versions in Directory.Packages.props
        shell: pwsh
        run: |
          $propsPath = "Source/Directory.Packages.props"
          if (!(Test-Path $propsPath)) {
            Write-Host "Brak pliku $propsPath, pomijam krok."
            exit 0
          }
          [xml]$props = Get-Content $propsPath

          function Get-LatestNugetVersionForMajor ($packageId, $major) {
            $url = "https://api.nuget.org/v3-flatcontainer/$packageId/index.json"
            try {
              $resp = Invoke-RestMethod -Uri $url -UseBasicParsing
              $versions = $resp.versions | Where-Object { $_ -match "^$major\." }
              if ($versions) {
                return $versions | Sort-Object {[version]$_} -Descending | Select-Object -First 1
              } else {
                # Jeśli nie ma wersji z tym prefixem, zwróć najnowszą
                return $resp.versions | Sort-Object {[version]$_} -Descending | Select-Object -First 1
              }
            } catch {
              Write-Host "Nie udało się pobrać wersji dla $packageId"
              return $null
            }
          }

          $changes = @()
          foreach ($itemGroup in $props.Project.ItemGroup) {
            if ($itemGroup.Condition) {
              if ($itemGroup.Condition -match "'\$\((?:TargetFramework|TargetFrameworkIdentifier)\)' *== *'net(\d+)\.0'") {
                $major = $Matches[1]
                foreach ($pkg in $itemGroup.PackageVersion) {
                  $id = $pkg.Include
                  $current = $pkg.Version
                  $latest = Get-LatestNugetVersionForMajor $id $major
                  if ($latest -and $current -ne $latest) {
                    Write-Host "Aktualizuję $id (net$major.0): $current -> $latest"
                    $pkg.Version = $latest
                    $changes += "$id (net$major.0): $current -> $latest"
                  }
                }
              }
            }
          }

          if ($changes.Count -gt 0) {
            $props.Save($propsPath)
            Set-Content -Path conditional-updates.log -Value ($changes -join "`n")
            Write-Host "Zaktualizowano warunkowe wersje pakietów."
          } else {
            Write-Host "Brak zmian w warunkowych wersjach pakietów."
            Set-Content -Path conditional-updates.log -Value ""

      - name: Check for changes
        id: git-check
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes to commit"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Ensure "automated-task" label exists
        if: steps.git-check.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh_label_exists=$(gh api repos/${{ github.repository }}/labels/automated-task --silent 2>/dev/null || echo "404")
          if [[ "$gh_label_exists" == "404" ]]; then
            gh api repos/${{ github.repository }}/labels \
              -X POST \
              -F name='automated-task' \
              -F color='ededed' \
              -F description='PR generated by NuGet update workflow'
          fi

      - name: Prepare PR body with list of updated packages
        id: pr-body
        if: steps.git-check.outputs.changed == 'true'
        run: |
          changes=$(grep -E ' -> ' outdated.log | grep -vE '^\s*$|^\[' | awk '{$1=$1};1' | sort | uniq)
          cond_changes=$(cat conditional-updates.log)
          BODY=""
          if [[ -n "$changes" ]]; then
              BODY="### The following NuGet packages were updated:"
              while IFS= read -r line; do
                  name=$(echo "$line" | awk '{print $1}')
                  from=$(echo "$line" | awk '{print $2}')
                  to=$(echo "$line" | awk '{print $4}')
                  BODY+="
          - **$name**: \`$from\` ~~→~~ \`$to\`"
              done <<< "$changes"
          fi
          if [[ -n "$cond_changes" ]]; then
              BODY+="
          ### The following conditional NuGet package versions were updated:"
              while IFS= read -r line; do
                  name=$(echo "$line" | awk -F':' '{print $1}')
                  fromto=$(echo "$line" | awk -F':' '{print $2}')
                  BODY+="
          - **$name**: $fromto"
              done <<< "$cond_changes"
          fi
          if [[ -z "$BODY" ]]; then
              BODY="NuGet run did not output package updates, but there are file changes."
          fi
          BODY="${BODY//'%'/'%25'}"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.git-check.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "[Task] Automated NuGet package update"
          commit-message: "[Task] Automated NuGet package update"
          branch: auto/update-nuget-packages
          base: master
          delete-branch: true
          labels: automated-task
          body: ${{ steps.pr-body.outputs.body }}