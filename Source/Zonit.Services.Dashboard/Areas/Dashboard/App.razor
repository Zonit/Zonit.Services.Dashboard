@using System.Globalization
@using System.Reflection
@using Microsoft.AspNetCore.Http
@using Zonit.Extensions.Cultures
@using Zonit.Extensions.Website.Abstractions

@inject ICultureProvider Culture
@inject IHttpContextAccessor _httpContextAccessor
@inject IAuthenticatedProvider Authenticated

<!DOCTYPE html>
<html lang="@Culture.GetCulture">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <base href="/@SettingsProvider.Settings.Directory/" />

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css?v=@(Assembly.GetAssembly(typeof(MudBlazor.AbstractLocalizationInterceptor))?.GetName().Version?.ToString())" rel="stylesheet" />
    <link href="_content/Zonit.Services.Dashboard/css/theme.css" rel="stylesheet" />

    @* <title>@SettingsProvider.Settings.Title</title> *@

    @* Tymczasowo  *@
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">

    <meta name="theme-color" content="#ff6100">
    <meta name="msapplication-TileColor" content="#ff6100">

    <link rel="icon" type="image/svg+xml" href="favicon.svg">

    <ImportMap />
    <HeadOutlet @rendermode="@RenderMode.InteractiveServer" />
</head>

<body>
    <Routes AssemblyNames="_assemblyNames" @rendermode="@RenderMode.InteractiveServer" />

    <Connection />

    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js?v=@(Assembly.GetAssembly(typeof(MudBlazor.AbstractLocalizationInterceptor))?.GetName().Version?.ToString())"></script>

    <script>
        window.blazorCulture = {
            get: () => window.localStorage['BlazorCulture'],
            set: (value) => window.localStorage['BlazorCulture'] = value
        };
    </script>

    <script>
        window.downloadFile = (fileName, fileContentBase64) => {
            // Dekodowanie Base64 do tablicy bajtów
            const binaryData = atob(fileContentBase64);
            const byteNumbers = new Array(binaryData.length);
            for (let i = 0; i < binaryData.length; i++) {
                byteNumbers[i] = binaryData.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);

            // Tworzenie Blob z tablicy bajtów
            const blob = new Blob([byteArray], { type: 'text/plain' });

            // Tworzenie linku do pobrania pliku
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;

            // Dodanie linku do dokumentu i wywołanie akcji pobierania
            document.body.appendChild(link);
            link.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));

            // Usunięcie linku po pobraniu pliku
            document.body.removeChild(link);
        };
    </script>

    @((MarkupString)SettingsProvider.Settings.CustomSnippet)

</body>
</html>

