@using Zonit.Extensions.Cultures
@using Zonit.Extensions.Organizations
@using Zonit.Services.EventMessage

@using Zonit.Services.Dashboard.Data
@using System.Timers

@namespace Zonit.Services.Dashboard.Areas.Dashboard.Components

@inject ICultureProvider Culture
@inject IWorkspaceProvider Workspace
@inject IExtensionManager ExtensionManager
@inject ITaskManager TaskManager

<MudDrawer   
    Open="@ExtensionManager.Drawer(Extensions.Task).IsOpen"
    OpenChanged="@(value => ExtensionManager.Drawer(Extensions.Task).Set(value))" 
    Width="420px" Height="100%" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">

    <MudDrawerHeader>
        <div class="d-flex align-center justify-space-between flex-grow-1 py-2">
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.Task" Class="mr-3" Size="Size.Medium" Color="Color.Primary" />
                <MudText Typo="Typo.h5" Style="font-weight: 600;">@Culture.Translate("Task Manager")</MudText>
            </div>
            <MudIconButton OnClick="@(() => ExtensionManager.Drawer(Extensions.Task).Close())"
                       Icon=@Icons.Material.Filled.Close
                       Size="Size.Small"
                       Color="Color.Default"
                       aria-label="@Culture.Translate("Close panel")" />
        </div>
    </MudDrawerHeader>

    <hr class="mud-divider my-0" />


    <div Class="d-flex flex-column" style="height: calc(100vh - 140px); overflow-y: auto;">
        @if (!ActiveTasks.Any())
        {
            <div class="d-flex flex-column align-center justify-center" style="min-height: 200px;">
                <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Size="Size.Large" Color="Color.Tertiary" Class="mb-3" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">
                    @Culture.Translate("All Tasks Completed")
                </MudText>
                <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary">
                    @Culture.Translate("No active tasks are currently running")
                </MudText>
            </div>
        }
        else
        {
            <div class="pa-4">
                <div class="mb-3">
                    <MudText Typo="Typo.overline" Style="font-weight: 600; letter-spacing: 0.5px;">
                        @Culture.Translate("Active Tasks") (@ActiveTasks.Count())
                    </MudText>
                </div>

                <MudStack Spacing="3">
                    @foreach (var task in ActiveTasks.OrderBy(t => t.CreatedAt))
                    {
                        <MudCard Elevation="2" Style="border-radius: 8px;">
                            <MudCardContent Class="pa-4">
                                <!-- Task Header -->
                                <div class="d-flex justify-space-between align-start mb-3">
                                    <div class="flex-grow-1 mr-3">
                                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600; line-height: 1.3;">
                                            @GetTaskTitle(task)
                                        </MudText>
                                        @* <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                            @Culture.Translate("Task ID"): @task.Id.ToString().Substring(0, 8)
                                        </MudText> *@
                                    </div>
                                    <MudChip T="string" Size="Size.Small" 
                                            Color="@GetTaskStatusColor(task.Status)" 
                                            Variant="Variant.Filled"
                                            Style="font-weight: 500;">
                                        @GetTaskStatusText(task.Status)
                                    </MudChip>
                                </div>

                                <!-- Progress Section -->
                                @if (task.Progress.HasValue)
                                {
                                    <div class="mb-3">
                                        <div class="d-flex justify-space-between align-center mb-1">
                                            <MudText Typo="Typo.caption" Style="font-weight: 500;">
                                                @Culture.Translate("Progress")
                                            </MudText>
                                            <MudText Typo="Typo.caption" Style="font-weight: 600;" Color="Color.Primary">
                                                @task.Progress.Value.ToString("0")%
                                            </MudText>
                                        </div>
                                        <MudProgressLinear Color="Color.Primary" 
                                                        Value="@task.Progress.Value" 
                                                        Size="Size.Small"
                                                        Rounded="true" />
                                    </div>
                                }

                                <!-- Timing Information -->
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetTaskTimeIcon(task.Status)" Size="Size.Small" Class="mr-2" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        @if (task.Status == TaskEventStatus.Processing)
                                        {
                                            @GetTaskDuration(task)
                                        }
                                        else if (task.CompletedAt.HasValue)
                                        {
                                            <span>@Culture.Translate("Completed in") @GetElapsedTime(task.ProcessedAt, task.CompletedAt)</span>
                                        }
                                        else
                                        {
                                            <span>@Culture.Translate("Created at") @task.CreatedAt.ToLocalTime().ToString("g")</span>
                                        }
                                    </MudText>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudStack>
            </div>
        }
    </div>
</MudDrawer>

@code{
    private IEnumerable<TaskEventModel> ActiveTasks { get; set; } = Enumerable.Empty<TaskEventModel>();
    private Timer? _timer;
    private DateTime _currentTime = DateTime.UtcNow;

    protected override void OnInitialized()
    {
        Culture.OnChange += StateHasChanged;
        Workspace.OnChange += StateHasChanged;
        ExtensionManager.Drawer(Extensions.Task)
            .OnChange += StateHasChanged;

        // Initialize timer for updating durations
        _timer = new Timer(1000);
        _timer.Elapsed += async (sender, e) =>
        {
            _currentTime = DateTime.UtcNow;
            await InvokeAsync(StateHasChanged);
        };
        _timer.AutoReset = true;
        _timer.Start();

        ActiveTasks = TaskManager.GetActiveTasks(Workspace.Organization?.Id);
        TaskManager.EventOnChange(async task =>
        {
            if (task.ExtensionId != Workspace.Organization?.Id && task.ExtensionId != null)
                return; // Ignore tasks from other organizations

            ActiveTasks = TaskManager.GetActiveTasks(Workspace.Organization?.Id);
            await InvokeAsync(StateHasChanged);
        });
    }

    private string GetTaskTitle(TaskEventModel task)
    {
        // Try to determine a user-friendly name from payload data
        var payloadData = task.Payload?.Data;
        
        if (payloadData != null)
        {
            // Try to get a name or title property using reflection
            var type = payloadData.GetType();
            var nameProperty = type.GetProperty("Name") ?? 
                               type.GetProperty("Title") ?? 
                               type.GetProperty("Description");
            
            if (nameProperty != null)
            {
                var nameValue = nameProperty.GetValue(payloadData)?.ToString();
                if (!string.IsNullOrEmpty(nameValue))
                {
                    return nameValue;
                }
            }
        }
        
        // Fallback to a more descriptive name
        return Culture.Translate("Background Task");
    }

    private Color GetTaskStatusColor(TaskEventStatus status)
    {
        return status switch
        {
            TaskEventStatus.Processing => Color.Info,
            TaskEventStatus.Completed => Color.Success,
            TaskEventStatus.Failed => Color.Error,
            TaskEventStatus.Cancelled => Color.Warning,
            _ => Color.Default,
        };
    }

    private string GetTaskStatusText(TaskEventStatus status)
    {
        return status switch
        {
            TaskEventStatus.Pending => Culture.Translate("Pending"),
            TaskEventStatus.Processing => Culture.Translate("In Progress"),
            TaskEventStatus.Completed => Culture.Translate("Completed"),
            TaskEventStatus.Failed => Culture.Translate("Failed"),
            TaskEventStatus.Cancelled => Culture.Translate("Cancelled"),
            _ => Culture.Translate("Unknown Status"),
        };
    }

    private string GetTaskTimeIcon(TaskEventStatus status)
    {
        return status switch
        {
            TaskEventStatus.Processing => Icons.Material.Filled.PlayArrow,
            TaskEventStatus.Completed => Icons.Material.Filled.CheckCircle,
            TaskEventStatus.Failed => Icons.Material.Filled.Error,
            TaskEventStatus.Cancelled => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.Schedule,
        };
    }

    private string GetTaskDuration(TaskEventModel task)
    {
        if (!task.ProcessedAt.HasValue)
            return Culture.Translate("Waiting to start");

        var duration = GetElapsedTime(task.ProcessedAt, _currentTime);
        return $"{Culture.Translate("Running for")} {duration}";
    }

    private string GetElapsedTime(DateTime? start, DateTime? end)
    {
        if (!start.HasValue || !end.HasValue)
            return "-";
            
        var duration = end.Value - start.Value;
        
        if (duration.TotalDays >= 1)
            return $"{Math.Floor(duration.TotalDays)}d {duration.Hours}h {duration.Minutes}m";
        else if (duration.TotalHours >= 1)
            return $"{duration.Hours}h {duration.Minutes}m {duration.Seconds}s";
        else if (duration.TotalMinutes >= 1)
            return $"{duration.Minutes}m {duration.Seconds}s";
        else
            return $"{duration.Seconds}s";
    }

    public void Dispose()
    {
        Culture.OnChange -= StateHasChanged;
        Workspace.OnChange -= StateHasChanged;
        ExtensionManager.Drawer(Extensions.Task)
            .OnChange -= StateHasChanged;
            
        _timer?.Stop();
        _timer?.Dispose();
    }
}