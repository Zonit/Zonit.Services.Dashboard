@using System.Globalization

@implements IDisposable

@inject IJSRuntime JSRuntime
@inject ICultureProvider Culture
@inject ICultureManager CultureManager
@inject ILanguageProvider Language

@if(CultureManager.SupportedCultures is not null)
{
    <MudTooltip Text="@Culture.Translate("Change languages")" Arrow="true" Placement="Placement.Top" RootStyle="width: 100%;">
        <MudButton Variant="Variant.Text" FullWidth="true" OnClick="OpenDrawer" Class="d-flex justify-center">
            <MudGrid Justify="Justify.Center" AlignItems="Center">
                <MudItem xs="2" Class="d-flex align-center">
                    @* <MudAvatar Color="Color.Transparent" Rounded="true" Variant="Variant.Text" Size="Size.Small" > *@
                            <MudIcon Color="Color.Dark" Icon="@currentLanguage.IconFlag" Size="Size.Small" />
                    @* </MudAvatar> *@
                </MudItem>
                <MudItem xs="6" Class="d-flex flex-column align-center">
                    <MudText Style="font-size: 10px; font-family: 'Roboto', sans-serif; font-weight: 400; letter-spacing: 0.5px; text-transform: uppercase; color: gray;">
                        @Culture.Translate("Language")
                    </MudText>
                    <MudText Style="font-size: 14px; font-family: 'Roboto', sans-serif; font-weight: 500; letter-spacing: 0.4px; text-transform: capitalize;">
                        @Culture.Translate(currentLanguage.EnglishName).ToUpper()
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudButton>
    </MudTooltip>

    <MudDivider Class="my-2" />

    <MudDrawer @bind-Open="@open" Width="300px" Height="100%" Anchor="Anchor.End" Elevation="3" Variant="@DrawerVariant.Temporary" Class="z-index: 99999999">
        <MudDrawerHeader>
            <div Class="d-flex align-center justify-space-between flex-grow-1 gap-4">
                <MudText Typo="Typo.h6">@Culture.Translate("Select language")</MudText>
                <MudIconButton OnClick="@(() => OpenDrawer())"
                               Icon=@Icons.Material.Filled.Close
                               aria-label="@Culture.Translate("Close")" />
            </div>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudPaper Elevation="0" Class="px-6 py-2">
                <MudList T=string SelectedValueChanged="(async (e) => await SwitchAsync(e))" SelectedValue="@Culture.GetCulture">
                    @foreach(var culture in CultureManager.SupportedCultures)
                    {
                        <MudListItem Icon="@culture.IconFlag" Value="@culture.Code">@Culture.Translate(culture.EnglishName)</MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudNavMenu>
    </MudDrawer>
}

@code {
    bool open;

    LanguageModel currentLanguage { get; set; } = null!;

    protected override void OnInitialized()
    {
        Culture.OnChange += StateHasChanged;
        currentLanguage = Language.GetByCode(Culture.GetCulture);
    }

    public void Dispose()
    {
        Culture.OnChange -= StateHasChanged;
    }

    void OpenDrawer()
        => open = !open;

    public async Task SwitchAsync(string culture)
    {
        // TODO: Pomyśl nad dodatkowym interfejsem, który zmieni kulturę i wywoła poniższy kod
        await JSRuntime.InvokeVoidAsync("blazorCulture.set", culture);
        await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = 'Culture={culture}; expires={DateTime.UtcNow.AddDays(365):R}; path=/;'");
        CultureManager.SetCulture(culture);

        currentLanguage = Language.GetByCode(culture);

        open = false;

        await Task.CompletedTask;
    }
}