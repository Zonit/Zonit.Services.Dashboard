@using Zonit.Extensions.Projects
@using Zonit.Extensions.Organizations

@implements IDisposable

@inject ICatalogProvider Catalog
@inject ICatalogManager CatalogManager

@inject IWorkspaceProvider Workspace

@inject ICultureProvider Culture
@inject NavigationManager NavigationManager

@inject IExtensionManager ExtensionManager

@if (Catalog.Project is not null)
{
    <MudTooltip Text="@Culture.Translate("Change projects")" Arrow="true" Placement="Placement.Top" RootStyle="width: 100%;">
        <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@(() => ExtensionManager.Drawer(Extensions.Projects).Toggle())" Class="d-flex justify-center">
            <MudGrid Justify="Justify.Center" AlignItems="Center">
                <MudItem xs="2" Class="d-flex align-center">
                    <MudAvatar Color="Color.Tertiary" Rounded="true" Size="Size.Small">
                        @Catalog.Project.Name[0]
                    </MudAvatar>
                </MudItem>
                <MudItem xs="6" Class="d-flex flex-column align-center">
                    <MudText Style="font-size: 10px; font-family: 'Roboto', sans-serif; font-weight: 400; letter-spacing: 0.5px; text-transform: uppercase; color: gray;">
                        @Culture.Translate("Project")
                    </MudText>
                    <MudText Style="font-size: 14px; font-family: 'Roboto', sans-serif; font-weight: 500; letter-spacing: 0.4px; text-transform: capitalize;">
                        @Catalog.Project.Name.ToUpper()
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudButton>
    </MudTooltip>

    <MudDivider Class="my-2" />

    <MudDrawer Open="@ExtensionManager.Drawer(Extensions.Projects).IsOpen"
               OpenChanged="@(value => ExtensionManager.Drawer(Extensions.Projects).Set(value))"
               Width="300px" Height="100%" Anchor="Anchor.End" Elevation="3" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <div Class="d-flex align-center justify-space-between flex-grow-1 gap-4">
                <MudText Typo="Typo.h6">@Culture.Translate("Projects")</MudText>
                <MudIconButton OnClick="@(() => ExtensionManager.Drawer(Extensions.Projects).Close())"
                               Icon=@Icons.Material.Filled.Close
                               aria-label="@Culture.Translate("Close")" />
            </div>
        </MudDrawerHeader>
        <MudNavMenu>
            <div class="px-6 py-2">
                <MudText Align="Align.Center" Class="mb-3">
                    <MudAvatar Color="Color.Tertiary" Rounded="true" Style="height:90px; width:90px; font-size:2rem;">
                        @Catalog.Project.Name[0]
                    </MudAvatar>
                </MudText>
                <MudText Align="Align.Center" Class="my-3" Typo="Typo.body1">
                    @Catalog.Project.Name
                </MudText>

                <MudDivider Class="my-4" />
                @if (CatalogManager.Projects is not null)
                {
                    <MudText Typo="Typo.body1" Class="mb-3">@Culture.Translate("Your projects")</MudText>
                    
                    <MudTextField @bind-Value="searchText" 
                                  Placeholder="@Culture.Translate("Search projects...")"
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Margin="Margin.Dense"
                                  Class="mb-3"
                                  Clearable="true"
                                  Immediate="true" />
                    
                    <MudList T=Guid @bind-SelectedValue=selectedProject>
                        @foreach (var organization in FilteredProjects)
                        {
                            <MudListItem Value="@organization.Id" Text="@organization.Name" OnClick="(async () => await SwitchAsync(organization.Id))" />
                        }
                    </MudList>
                    
                    @if (!FilteredProjects.Any() && !string.IsNullOrWhiteSpace(searchText))
                    {
                        <MudText Typo="Typo.body2" Class="text-center pa-4" Style="color: gray;">
                            @Culture.Translate("No projects found")
                        </MudText>
                    }
                }
                <MudDivider Class="my-4" />
                <MudButton FullWidth="true" OnClick="@(() => GoToManage("projects"))">@Culture.Translate("Manage projects")</MudButton>
            </div>
        </MudNavMenu>
    </MudDrawer>
}

@code {
    Guid selectedProject;
    string searchText = string.Empty;

    private IEnumerable<dynamic> FilteredProjects => 
        string.IsNullOrWhiteSpace(searchText) 
            ? CatalogManager.Projects ?? Enumerable.Empty<dynamic>()
            : (CatalogManager.Projects ?? Enumerable.Empty<dynamic>())
                .Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    protected override void OnInitialized()
    {
        Culture.OnChange += StateHasChanged;
        Catalog.OnChange += StateHasChanged;
        Workspace.OnChange += StateHasChanged;
        ExtensionManager.Drawer(Extensions.Projects)
            .OnChange += StateHasChanged;

        if (Catalog.Project is not null)
            selectedProject = Catalog.Project.Id;
    }

    public void Dispose()
    {
        Culture.OnChange -= StateHasChanged;
        Catalog.OnChange -= StateHasChanged;
        Workspace.OnChange -= StateHasChanged;
        ExtensionManager.Drawer(Extensions.Projects)
            .OnChange -= StateHasChanged;
    }

    void GoToManage(string url)
    {
        ExtensionManager.Drawer(Extensions.Projects).Close();
        NavigationManager.NavigateTo(url);
    }

    public async Task SwitchAsync(Guid projectId)
    {
        await CatalogManager.SwitchProjectAsync(projectId);
    }
}