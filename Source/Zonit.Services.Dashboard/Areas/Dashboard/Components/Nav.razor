@using Zonit.Extensions.Cultures
@using Zonit.Extensions.Website
@using Zonit.Extensions.Website.Abstractions.Navigations.Models
@using Zonit.Extensions.Website.Abstractions.Navigations.Types

@implements IDisposable

@inject ICultureProvider Culture
@inject INavigationProvider Navigation

@if (NavItems is not null)
{
    @foreach (var nav in NavItems)
    {
        <AuthorizeView Policy="@nav.Permission" Context="navContext">
            @if (nav.Children is null && nav.Link is not null)
            {
                @* Pojedynczy link bez grupy *@
                <MudNavLink Href="@nav.Link.Url"
                            Match="NavLinkMatch.Prefix"
                            Target="@nav.Link.Target"
                            Icon="@nav.Icon">
                    @Culture.Translate(nav.Title)
                </MudNavLink>
            }
            else if (nav.Children is not null)
            {
                @* Nagłówek grupy *@
                <MudText Typo="Typo.overline" 
                         Class="px-4 pt-4 pb-1 mud-text-secondary" 
                         Style="font-weight: 500; font-size: 0.75rem; letter-spacing: 0.08em;">
                    @Culture.Translate(nav.Title)
                </MudText>
                
                @* Linki w grupie *@
                @foreach (var link in nav.Children.OrderBy(x => x.Order).ToList())
                {
                    <AuthorizeView Policy="@link.Permission" Context="linkContext">
                        <MudNavLink Href="@link.Url"
                                    Match="@(link.Match ? NavLinkMatch.All : NavLinkMatch.Prefix)"
                                    Target="@link.Target"
                                    Icon="@link.Icon"
                                    Class="my-1">
                            @Culture.Translate(link.Title)
                        </MudNavLink>
                    </AuthorizeView>
                }
                
                @* Divider po grupie *@
                <MudDivider Class="my-3" />
            }
        </AuthorizeView>
    }
}

@code {
    [Parameter, EditorRequired]
    public AreaType AreaType { get; set; }

    [Parameter]
    public string? Position { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Inherit;

    public IReadOnlyCollection<NavGroupModel>? NavItems { get; set; }

    protected override void OnInitialized()
    {
        NavItems = Navigation.Get(AreaType, Position);
        Culture.OnChange += StateHasChanged;
    }

    void IDisposable.Dispose()
    {
        NavItems = null;
        Culture.OnChange -= StateHasChanged;
    }
}
