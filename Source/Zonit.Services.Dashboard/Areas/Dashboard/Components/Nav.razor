@using Zonit.Extensions.Cultures
@using Zonit.Extensions.Website
@using Zonit.Extensions.Website.Abstractions.Navigations.Models
@using Zonit.Extensions.Website.Abstractions.Navigations.Types

@implements IDisposable

@inject ICultureProvider Culture
@inject INavigationProvider Navigation

@if(NavItems is not null)
{
    @foreach (var nav in NavItems)
    {
        @if (nav.Children is null && nav.Link is not null)
        {
            <MudNavLink Href="@nav.Link.Url" Match="NavLinkMatch.Prefix" Target="@nav.Link.Target" Icon="@nav.Icon">
                <div style="padding-left: 12px">@Culture.Translate(nav.Title)</div>
            </MudNavLink>
        }
        else if (nav.Children is not null)
        {
            <MudNavGroup Title="@Culture.Translate(nav.Title)" Icon="@nav.Icon" Expanded=@nav.Expanded>
                @foreach (var link in nav.Children.OrderBy(x => x.Order).ToList())
                {
                    <MudNavLink Href="@link.Url" Match="@(link.Match ? NavLinkMatch.All : NavLinkMatch.Prefix)" Target="@link.Target" Icon="@link.Icon">@Culture.Translate(link.Title)</MudNavLink>
                }
            </MudNavGroup>
        }
    }
}

@code{
    [Parameter, EditorRequired]
    public AreaType AreaType { get; set; }

    public IReadOnlyCollection<NavGroupModel>? NavItems { get; set; }

    protected override void OnInitialized()
    {
        NavItems = Navigation.Get(AreaType);
        Culture.OnChange += StateHasChanged;
    }

    void IDisposable.Dispose()
    {
        NavItems = null;
        Culture.OnChange -= StateHasChanged;
    }
}