@using Zonit.Extensions.Cultures
@using Zonit.Extensions.Website
@using Data

@using Zonit.Extensions.Projects
@using Zonit.Extensions.Organizations

@using Zonit.Services.Dashboard.Areas.Dashboard.Components

@implements IDisposable

@inject ICultureProvider Culture
@inject ICookieProvider Cookie

@inject ICatalogProvider Catalog
@inject IWorkspaceProvider Workspace

@inject IExtensionManager ExtensionManager

<MudAppBar Elevation="1" Style="z-index: 1;">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

    <div class="d-none d-sm-block">
        <MudBreadcrumbs Items="Breadcrumbs">
            <ItemTemplate Context="item">
                @if (Catalog.Project is not null && item.Href == "Catalog")
                {
                    <MudButton OnClick="@(() => ExtensionManager.Drawer(Extensions.Projects).Toggle())" Variant="Variant.Text" EndIcon="@IconData.ChevronExpand" Color="Color.Transparent" Size="Size.Small">
                        <MudAvatar Size=Size.Small Rounded Color="Color.Tertiary" Class="mr-2">@Catalog.Project.Name[0]</MudAvatar>
                        @Catalog.Project.Name
                    </MudButton>
                }
                else if (Workspace.Organization is not null && item.Href == "Workspace")
                {
                    <MudButton OnClick="@(() => ExtensionManager.Drawer(Extensions.Organizations).Toggle())" Variant="Variant.Text" EndIcon="@IconData.ChevronExpand" Color="Color.Transparent" Size="Size.Small">
                        <MudAvatar Size=Size.Small Rounded Color="Color.Warning" Class="mr-2">@Workspace.Organization.Name[0]</MudAvatar> 
                        @Workspace.Organization.Name
                    </MudButton>
                }
                else
                {
                    <MudLink Href="@item.Href" Class="nav-link-style" Color="Color.Default">@Culture.Translate(item.Text)</MudLink>
                }
            </ItemTemplate>
        </MudBreadcrumbs>
    </div>

    <MudSpacer />

    <ExtensionView Name="@Extensions.Task">
        <TaskButton />
    </ExtensionView>

    <MudIconButton Icon="@IconData.User" Color="Color.Inherit" Class="mx-1" Edge="Edge.Start" OnClick="@((e) => DrawerRightToggle())" />
</MudAppBar>

@code {
    [Parameter, EditorRequired]
    public MudThemeProvider MudThemeProvider { get; set; } = null!;

    [Parameter, EditorRequired]
    public bool DrawerOpen { get; set; } = true;

    [Parameter]
    public EventCallback<bool> DrawerOpenChanged { get; set; }

    [Parameter, EditorRequired]
    public bool DrawerRightOpen { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DrawerRightOpenChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public int Hegith { get; set; }

    [Parameter]
    public List<BreadcrumbItem> Breadcrumbs { get; set; }

    protected override void OnInitialized()
    {
        Culture.OnChange += StateHasChanged;
        Catalog.OnChange += StateHasChanged;
        Workspace.OnChange += StateHasChanged;
    }

    void IDisposable.Dispose()
    {
        Culture.OnChange -= StateHasChanged;
        Catalog.OnChange -= StateHasChanged;
        Workspace.OnChange -= StateHasChanged;
    }

    void DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;

        if (Width <= 1366 && Width > 1024)
        {
            DrawerRightOpen = !DrawerRightOpen;
            DrawerRightOpenChanged.InvokeAsync(DrawerRightOpen);
        }

        DrawerOpenChanged.InvokeAsync(DrawerOpen);
    }

    void DrawerRightToggle()
    {
        DrawerRightOpen = !DrawerRightOpen;

        if (Width <= 1366 && Width > 1024)
        {
            DrawerOpen = !DrawerOpen;
            DrawerOpenChanged.InvokeAsync(DrawerOpen);
        }

        DrawerRightOpenChanged.InvokeAsync(DrawerRightOpen);
    }
}