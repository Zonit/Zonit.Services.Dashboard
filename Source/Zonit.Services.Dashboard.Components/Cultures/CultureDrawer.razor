@using System.Globalization
@using Zonit.Extensions.Cultures

@namespace Zonit.Services.Dashboard.Components

@inject ICultureProvider Culture
@inject IExtensionManager ExtensionManager
@inject ICultureManager CultureManager
@inject ILanguageProvider Language
@inject IJSRuntime JSRuntime
@implements IDisposable

@if(CultureManager.SupportedCultures is not null)
{
    <MudDrawer Open="@ExtensionManager.Drawer(Extensions.Cultures).IsOpen"
               OpenChanged="@(value => ExtensionManager.Drawer(Extensions.Cultures).Set(value))"
               Width="300px" Height="100%" Anchor="Anchor.End" Elevation="3" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <div class="d-flex align-center justify-space-between flex-grow-1 py-2">
                <div class="d-flex align-center">
                    <MudIcon Icon="@IconData.Language" Class="mr-3" Size="Size.Medium" Color="Color.Inherit" />
                    <MudText Typo="Typo.h5" Style="font-weight: 600;">@Culture.Translate("Select language")</MudText>
                </div>
                <MudIconButton OnClick="@(() => ExtensionManager.Drawer(Extensions.Cultures).Close())"
                               Icon=@Icons.Material.Filled.Close
                               Size="Size.Small"
                               Color="Color.Default"
                               aria-label="@Culture.Translate("Close")" />
            </div>
        </MudDrawerHeader>
        
        <MudNavMenu>
            <div class="px-6 py-2">
                <MudTextField @bind-Value="searchText" 
                              Placeholder="@Culture.Translate("Search languages...")"
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Margin="Margin.Dense"
                              Class="mb-3"
                              Clearable="true"
                              Immediate="true" />
                
                <MudList T=string SelectedValueChanged="(async (e) => await SwitchAsync(e))" SelectedValue="@Culture.GetCulture">
                    @foreach(var culture in FilteredCultures)
                    {
                        <MudListItem Icon="@((string)culture.IconFlag)" Value="@((string)culture.Code)">@Culture.Translate((string)culture.EnglishName)</MudListItem>
                    }
                </MudList>
                
                @if (!FilteredCultures.Any() && !string.IsNullOrWhiteSpace(searchText))
                {
                    <MudText Typo="Typo.body2" Class="text-center pa-4" Style="color: gray;">
                        @Culture.Translate("No languages found")
                    </MudText>
                }
            </div>
        </MudNavMenu>
    </MudDrawer>
}

@code {
    LanguageModel currentLanguage { get; set; } = null!;
    string searchText = string.Empty;

    private IEnumerable<dynamic> FilteredCultures => 
        string.IsNullOrWhiteSpace(searchText) 
            ? CultureManager.SupportedCultures ?? Enumerable.Empty<dynamic>()
            : (CultureManager.SupportedCultures ?? Enumerable.Empty<dynamic>())
                .Where(c => Culture.Translate((string)c.EnglishName).Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                           ((string)c.EnglishName).Contains(searchText, StringComparison.OrdinalIgnoreCase));

    protected override void OnInitialized()
    {
        Culture.OnChange += StateHasChanged;
        ExtensionManager.Drawer(Extensions.Cultures)
            .OnChange += StateHasChanged;
        
        currentLanguage = Language.GetByCode(Culture.GetCulture);
    }

    public void Dispose()
    {
        Culture.OnChange -= StateHasChanged;
        ExtensionManager.Drawer(Extensions.Cultures)
            .OnChange -= StateHasChanged;
    }

    public async Task SwitchAsync(string culture)
    {
        // TODO: Pomyśl nad dodatkowym interfejsem, który zmieni kulturę i wywoła poniższy kod
        await JSRuntime.InvokeVoidAsync("blazorCulture.set", culture);
        await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = 'Culture={culture}; expires={DateTime.UtcNow.AddDays(365):R}; path=/;'");
        CultureManager.SetCulture(culture);

        currentLanguage = Language.GetByCode(culture);

        ExtensionManager.Drawer(Extensions.Cultures).Close();

        await Task.CompletedTask;
    }
}